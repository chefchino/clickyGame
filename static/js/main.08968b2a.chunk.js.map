{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","components/Alert/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","handlePicked","key","id","name","style","backgroundImage","image","clicked","toString","Wrapper","children","Alert","message","winner","App","state","animals","Animals","topScore","alertMessage","alertWinner","score","reset","_","newAnimals","Array","from","forEach","value","index","setState","event","pick","target","attributes","getNamedItem","console","log","toUpperCase","x","newScore","newTopScore","topScorer","shuffleAnimals","shuffleArray","a","j","i","length","Math","floor","random","this","map","animal","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08968b2a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n    // function handlePicked() {\r\n        \r\n    //     console.log(\"clicked\", this)\r\n    // }\r\n    // console.log(name\r\n    return (\r\n        <div  className=\"card\" >\r\n            <div \r\n            onClick={props.handlePicked}\r\n            className=\"img-container\"\r\n            key={props.id}\r\n            name={props.name} \r\n            style={{ backgroundImage: `url(${props.image})`}}\r\n            clicked={props.clicked.toString()}\r\n            >\r\n                {/* <img alt={props.name} src={props.image}/> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Alert = props => (\r\n    <div className=\"alert\">\r\n        {props.message} {props.winner}\r\n    </div>\r\n\r\n\r\n);\r\nexport default Alert;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\"\nimport Wrapper from \"./components/Wrapper\"\nimport Animals from \"./Animals.json\";\nimport Alert from \"./components/Alert/index\";\nimport './App.css';\nclass App extends Component {\n  state = {\n    animals: Animals,\n    topScore: 0,\n    alertMessage: \"\",\n    alertWinner: \"\",\n    score: 0\n  };\n  reset = _ => {\n    let newAnimals = Array.from(this.state.animals)\n    newAnimals.forEach((value, index) => {\n      value.clicked = false\n    })\n    this.setState({ animals: newAnimals, score: 0, alertWinner: \"\"})\n  }\n  handlePicked = event => {\n    const pick = event.target.attributes.getNamedItem(\"name\").value;\n    const clicked = event.target.attributes.getNamedItem(\"clicked\").value;\n    console.log(clicked)\n    if (clicked === \"true\") {\n      this.alertMessage = `YOU LOSE ${pick.toUpperCase()} was already picked!`\n      this.reset()\n    } else {\n      let newAnimals = Array.from(this.state.animals)\n      this.alertMessage = `NICE ONE!!!`\n      let x;\n      newAnimals.forEach((value, index) => {\n        if (value.name === pick) x = index\n      })\n      newAnimals[x].clicked = true\n      let newScore    = this.state.score + 1\n      let newTopScore =  (newScore > this.state.topScore) ? newScore : this.state.topScore\n\n      // let newTopScore = Math.max(newScore, +-this.state.topScore)\n\n      this.setState({ score: newScore });\n      this.setState({ topScore: newTopScore })\n      //console.log(\"x\",newAnimals)\n      this.setState({ animals: newAnimals })\n      this.topScorer()\n    }\n    this.shuffleAnimals()\n  };\n  shuffleAnimals = () => {\n    this.setState({ animals: this.shuffleArray(this.state.animals) })\n  }\n  topScorer = () => {\n    if (this.state.score === 17) {\n      this.alertWinner = \"Wow you have a GOOD MEMORY!!!\"\n      this.reset()\n    }\n  }\n  shuffleArray = (a) => {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    return a;\n  }\n  render() {\n    return (\n      <div>\n        <h1 className=\"title\"> ClickyGame</h1>\n        <h3>Score: {this.state.score}</h3>\n        <h3>topScore: {this.state.topScore}</h3>\n        <Alert message={this.alertMessage} />\n        <Alert winner={this.alertWinner} />\n        <Wrapper>\n          {this.state.animals.map(animal => (\n            <Card\n              key={animal.id}\n              name={animal.name}\n              image={animal.image}\n              handlePicked={this.handlePicked}\n              clicked={animal.clicked}\n            />\n          ))\n          }\n        </Wrapper>\n      </div>\n    )\n  }\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}